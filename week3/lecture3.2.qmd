---
title: "Lecture 3.2"
name: Rachel Spellenberg
---

## Setup
```{r}
## --- load packages ---
library(tidyverse)
library(chron)
library(naniar)


## --- import our data ---
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")
```


## Wrangle
```{r}
### str(mko_clean) in the console to look at the structure of the data

mko_clean <- mko %>% 
  select(year, month, day, decimal_time, Temp_bot) %>% 

  # creating new column date by uniting year, month, date, and separating by a hyphen. FALSE keeps old columns
  unite(date, year, month, day, sep = "-", remove = FALSE) %>% 
  
  #converting time from decimal time to something that makes more sense
  mutate(time = times(decimal_time)) %>% 
  
  #combine date column with time column
  unite(date_time, date, time, sep = " ") %>% 
  
  #change/coercing to date/time object from character string. POSIXct is a built in R func. Changing other column to factors
  mutate(date_time = as.POSIXct(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"), 
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) %>% 
  
  #changing month column to full month name
  mutate(month_name = as.factor(month.name[month])) %>% 
  
  # 9999 in Temp_bot are NAs; convert to NAs
  replace_with_na(replace = list(Temp_bot = 9999))

### ----- look at chunk of code on Slide 5 !!! -----
  
```

## Histograms
frequency/counts in each range/bin

```{r}
# original plot -----

mko_clean %>% 
  
  mutate(month_name = factor(month_name, levels = month.name)) %>% 
  
  ggplot(aes(x = Temp_bot, 
             fill = month_name)) +
  
  geom_histogram(position = "identity",
                 alpha = 0.5)

#small multiples -----

mko_clean %>% 
  
  mutate(month_name = factor(month_name, levels = month.name)) %>% 
  
  ggplot(aes(x = Temp_bot)) +
  
  geom_histogram(position = "identity") +
  
  facet_wrap(~month_name)

# fewer groups -----

mko_clean %>% 
  
  mutate(month_name = factor(month_name, levels = month.name)) %>% 
  
  filter(month_name %in% c("April", "June", "October")) %>% 
  
  ggplot(aes(x = Temp_bot,
             fill = month_name)) +
  
  geom_histogram(position = "identity",
                 alpha = 0.5,
                 binwidth = 1) + ### bins controls the width of the bars, binwidth controls the interval of the bins
  
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## Density Plots
proportion of values in each range

```{r}
# original plot -----
mko_clean %>% 
  
  mutate(month_name = factor(month_name, levels = month.name)) %>% 
  
  ggplot(aes(x = Temp_bot, 
             fill = month_name)) +
  
  geom_density(alpha = 0.5)

# fewer groups -----
mko_clean %>% 
  
  mutate(month_name = factor(month_name, levels = month.name)) %>% 
  
  filter(month_name %in% c("April", "June", "October")) %>% 
  
  ggplot(aes(x = Temp_bot,
             fill = month_name)) +
  
  geom_density(alpha = 0.5,
               adjust = 1/2) + ### adjust makes it more smooth over value of 1
  
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

### hist vs density
```{r}
dummy_data <- data.frame(value = c(rnorm(n = 100, mean = 5),
                                   rnorm(n = 200, mean = 10)),
                         group = rep(c("A", "B"),
                                     times = c(100, 200)))

# hist -----
ggplot(dummy_data, aes(x = value, fill = group)) +
  
  geom_histogram(position = "identity", 
                 alpha = 0.7) +
  
  geom_rug(aes(color = group), alpha = 0.7)

# density -----
ggplot(dummy_data, aes(x = value, fill = group)) +
  
  geom_density(alpha = 0.7) +
  
  geom_rug(aes(color = group), alpha = 0.7)

### ----- come back and look at the slides to finish this lecture!!! -----

```

## Ridgeline Plot
helpful when you have over 6 groups
```{r}
ggplot(mko_clean, aes(x = Temp_bot,
                      y = month_name,
                      fill = after_stat(x))) + ### maps x aes
  
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, ###cuts the tails
                                         scale = 3) + ### level of overlap
  
  scale_y_discrete(limits = rev(month.name)) +
  
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```

## Box Plot
work with any number of groups; don't know dist or sample size with a basic box plot
can overlay scatter plot with jitter if sample is small
```{r}
ggplot(mko_clean, aes(x = month_name, 
                      y = Temp_bot,
                      fill = month_name)) +
  
  geom_boxplot() +
  
  scale_x_discrete(limits = rev(month.name)) +
  
  coord_flip() +
  
  gghighlight::gghighlight(month_name == "October") +
  
  theme(legend.position = "none")

# jitter and dodge -----

library(palmerpenguins)

penguins %>% 
  
  mutate(year = as.factor(year)) %>% 
  
  ggplot(aes(x = species, y = body_mass_g, 
             color = year)) +
  
  geom_boxplot() +
  
  geom_point(alpha = 0.5, 
             position = position_jitterdodge(jitter.width = 0.2)) +
  
  coord_flip()
```

## Violin Plots
dist of a numerical variable for one or several groups
```{r}
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  
  geom_violin() +
  
  geom_boxplot(color = "gray", alpha = 0.5, width = 0.1, ###overlaying boxplot
               outlier.colour = "black") +
  
  scale_x_discrete(limits = rev(month.name)) +
  
  coord_flip()

## half violin half dot plot
ggplot(penguins, aes(x = species, y = bill_length_mm,
                     fill = species)) +
  
  see::geom_violindot(size_dots = 5, alpha = 0.5) +
  
  theme(legend.position = "none")
```

